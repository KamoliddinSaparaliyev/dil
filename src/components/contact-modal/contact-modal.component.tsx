import { useState } from "react";
import { CHAT_ID, TOKEN, request } from "../../server";
import { FormData } from "../../types";
import useModalStore from "../../state/modalStore";
import close from "../../assets/icons/close.svg";

//modal styles
import "./contact-modal.scss";
import useAlertStore from "../../state/succesStore";
import { toast } from "react-toastify";

export const ContactModal = () => {
  const { isModalOpen, closeModal } = useModalStore();
  const {openAlert, closeAlert} = useAlertStore();
  const [formData, setFormData] = useState<FormData>({
    name: "",
    email: "",
    message: "",
  });

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;
    setFormData((prevData) => ({ ...prevData, [name]: value }));
  };

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    const apiToken = TOKEN;
    const chatId = CHAT_ID; 
    const message = `
      New message from user:
      üë§ Name: ${formData.name}
      üì™ Email: ${formData.email}
      ‚úâÔ∏è Message: ${formData.message}

      üßëüèª‚Äçüíª Connect with developer: @jurayev_diyorbek
    `;
    try {
      await request.post(`bot${apiToken}/sendMessage`, {
        chat_id: chatId,
        text: message,
      });
      
      setFormData({ name: "", email: "", message: "" });
      closeModal();
      openAlert()
      setTimeout(() => closeAlert(), 2000);
      toast.success("Message sent successfully")
    } catch (error) {
      toast.error("Error sending message to Telegram:");
    }
  };

  return (
    <div className={`modal__wrapper ${isModalOpen ? "open" : "close"}`}>
      <div className="modal">
        <button className="close_btn" onClick={closeModal}>
          <img src={close} alt="close icon" />
        </button>
        <h1>–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</h1>
        <p>
          –í —Ä–∞–º–∫–∞—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —É—Ç–æ—á–Ω–∏–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
          –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        </p>
        <form className="form" onSubmit={handleSubmit}>
          <div className="form__group">
            <input
              type="text"
              name="name"
              value={formData.name}
              onChange={handleChange}
              placeholder="–í–∞—à–µ –∏–º—è"
            />
            <input
              type="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              placeholder="–í–∞—à —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞"
            />
            <input
              type="email"
              name="message"
              value={formData.message}
              onChange={handleChange}
              placeholder="–∫–∞–∫–∞—è –∏–∑ —É—Å–ª—É–≥ –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ ?"
            />
          </div>
          <button type="submit" className="sent_btn">
            –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
          </button>
        </form>
      </div>
    </div>
  );
};
